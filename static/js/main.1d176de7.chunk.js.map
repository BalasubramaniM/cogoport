{"version":3,"sources":["reducers/common.js","reducer.js","constants/actionTypes.js","store.js","components/Home/Select.js","components/Home/index.js","components/App.js","index.js"],"names":["defaultState","appName","appLoaded","combineReducers","common","state","arguments","length","undefined","type","Object","objectSpread","router","routerReducer","history","createHistory","myRouterMiddleware","routerMiddleware","store","createStore","reducer","applyMiddleware","Suggestions","props","onSelect","event","portId","Number","currentTarget","getAttribute","react_default","a","createElement","className","results","map","value","id","onClick","key","name","Select","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showSuggestion","bind","assertThisInitialized","onChange","handleClickOutside","document","addEventListener","removeEventListener","options","setState","container","contains","target","query","queryResults","filter","toLowerCase","includes","_this$props","port","val","apply","toConsumableArray","_this2","_this$state","suggestion","Select_Suggestions","Fragment","placeholder","ref","React","Component","Home","originQuery","destQuery","onSelectOrigin","onChangeOrigin","onSelectDest","onChangeDest","onLoad","getPorts","axios","get","then","_ref","data","ports","Home_Select","connect","dispatch","App","components_Home","ReactDOM","render","lib","react_router_redux_es","Switch","Route","path","component","getElementById"],"mappings":"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","file":"static/js/main.1d176de7.chunk.js","sourcesContent":["import { APP_LOAD } from \"../constants/actionTypes\";\n\nconst defaultState = {\n    appName: \"Cogoport\",\n    appLoaded: false\n};\n\nexport default (state = defaultState, action) => {\n    switch (action.type) {\n        case APP_LOAD:\n            return {\n                ...state,\n                appLoaded: true\n            };\n        default:\n            return state;\n    }\n};\n","import common from \"./reducers/common\";\nimport { combineReducers } from \"redux\";\nimport { routerReducer } from \"react-router-redux\";\n\nexport default combineReducers({\n\tcommon,\n\trouter: routerReducer\n});\n","/**\n * Constants to handle Redux Store at one place.\n */\n\nexport const APP_LOAD = \"APP_LOAD\";\n","import { applyMiddleware, createStore } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport reducer from \"./reducer\";\n\nimport { routerMiddleware } from \"react-router-redux\";\nimport createHistory from \"history/createBrowserHistory\";\n\nexport const history = createHistory();\n\n// Build the middleware for intercepting and dispatching navigation actions\nconst myRouterMiddleware = routerMiddleware(history);\n\nconst getMiddleware = () => {\n\tif (process.env.NODE_ENV === \"production\") {\n\t\treturn applyMiddleware(myRouterMiddleware);\n\t} else {\n\t\t// Enable additional logging in non-production environments.\n\t\treturn applyMiddleware(\n\t\t\tmyRouterMiddleware,\n\t\t\tcreateLogger()\n\t\t);\n\t}\n};\n\nexport const store = createStore(reducer, getMiddleware());\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Suggestion box.\n * @param {object} props\n */\nconst Suggestions = (props) => {\n\n    /**\n     * Invoked when selecting the list item in the dropdown (suggestion box).\n     * @param {event} event\n     */\n    const onSelect = (event) => {\n        let portId = Number(event.currentTarget.getAttribute('id'));\n        props.onSelect(portId);\n    }\n    return (\n        <ul className='ports-list'>\n            {\n                props.results.map(value => (\n                    <li id={value.id} onClick={onSelect} key={value.id}>\n                        {value.name}\n                    </li>\n                ))\n            }\n        </ul>\n    )\n}\n\n/**\n * Select box.\n */\nclass Select extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showSuggestion: false,\n            results: []\n        }\n        this.onClick = this.onClick.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentDidUpdate() {\n        const { results } = this.state;\n        if (results.length === 0 && this.props.options.length > 0) {\n            this.setState({\n                results: this.props.options\n            })\n        }\n    }\n\n    /**\n     * Handle click outside of the suggestion box to close.\n     * @param {event} event\n     */\n    handleClickOutside(event) {\n        if (this.container && !this.container.contains(event.target)) {\n            this.setState({\n                showSuggestion: false\n            });\n        }\n    }\n\n    /**\n     * Select box onChange event.\n     * Invoked when the input is being typed in the search bar.\n     * @param {event} event\n     */\n    onChange(event) {\n        let query = event.target.value;\n        this.props.onChange(query);\n        let queryResults = this.props.options.filter(value => {\n            return value.name.toLowerCase().includes(query.toLowerCase());\n        });\n        this.setState({\n            results: queryResults\n        });\n    }\n\n    /**\n     * Select box onSelect event.\n     * Invoked when the list item is selected.\n     * @param {String} portId\n     */\n    onSelect(portId) {\n        const results = this.props.options;\n        let port = results.filter(val => val.id === portId);\n        if (port.length > 0) {\n            this.props.onSelect(...port);\n            this.setState({\n                showSuggestion: false\n            });\n        }\n    }\n\n    /**\n     * Select box onClick event.\n     * Invoked when the search box is clicked.\n     * @param {event} event\n     */\n    onClick(event) {\n        this.setState({\n            showSuggestion: true\n        });\n    }\n\n    render() {\n\n        // Suggestion div rendering.\n        let { showSuggestion, results } = this.state;\n        let suggestion = \"\";\n        if (showSuggestion) {\n            suggestion = <Suggestions onSelect={this.onSelect} results={results} />;\n        }\n\n        return (\n            <React.Fragment>\n                <input\n                    type=\"text\"\n                    className={this.props.className}\n                    placeholder={this.props.placeholder}\n                    value={this.props.value}\n                    onClick={this.onClick}\n                    onChange={this.onChange}\n                />\n                <div className='suggestion-div' ref={container => this.container = container}>\n                    {suggestion}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n/**\n * Properties and it's types for the Select box.\n */\nSelect.propTypes = {\n    className: PropTypes.string,\n    placeholder: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default Select;","import React from \"react\";\nimport axios from 'axios';\nimport { connect } from \"react-redux\";\nimport { APP_LOAD } from \"../../constants/actionTypes\";\n\n// CSS Styles\nimport \"../../styles/variables.css\";\nimport \"../../styles/nav.css\";\nimport \"../../styles/styles.css\";\nimport \"../../styles/responsive.css\";\n\n// Select box.\nimport Select from \"./Select\";\n\nconst mapStateToProps = state => ({\n\t...state.common\n});\n\nconst mapDispatchToProps = dispatch => ({\n\tonLoad: () => dispatch({ type: APP_LOAD })\n});\n\nclass Home extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tresults: [],\n\t\t\toriginQuery: '',\n\t\t\tdestQuery: ''\n\t\t};\n\t\tthis.onSelectOrigin = this.onSelectOrigin.bind(this);\n\t\tthis.onChangeOrigin = this.onChangeOrigin.bind(this);\n\t\tthis.onSelectDest = this.onSelectDest.bind(this);\n\t\tthis.onChangeDest = this.onChangeDest.bind(this);\n\t}\n\n\t/**\n\t * Invoked after selecting the port in the origin dropdown.\n\t * @param {object} port\n\t */\n\tonSelectOrigin(port) {\n\t\tthis.setState({\n\t\t\toriginQuery: port.name\n\t\t});\n\t}\n\n\t/**\n\t * Invoked when typing in the origin search box.\n\t * @param {string} value\n\t */\n\tonChangeOrigin(value) {\n\t\tthis.setState({\n\t\t\toriginQuery: value\n\t\t});\n\t}\n\n\t/**\n\t * Invoked after selecting the port in the destination dropdown.\n\t * @param {object} port\n\t */\n\tonSelectDest(port) {\n\t\tthis.setState({\n\t\t\tdestQuery: port.name\n\t\t});\n\t}\n\n\t/**\n\t * Invoked when typing in the destination search box.\n\t * @param {string} value\n\t */\n\tonChangeDest(value) {\n\t\tthis.setState({\n\t\t\tdestQuery: value\n\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.props.onLoad();\n\t\tthis.getPorts(); // Call API and bind the response to the select boxes.\n\t}\n\n\t/**\n\t * Get response and bind the results to the select boxes.\n\t */\n\tgetPorts() {\n\t\taxios\n\t\t\t.get('https://gist.githubusercontent.com/BalasubramaniM/77f168801859f51c7f7b6fb4cbf3d43a/raw')\n\t\t\t.then(({ data }) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tresults: data.ports\n\t\t\t\t});\n\t\t\t});\n\t}\n\n\trender() {\n\t\tlet { results, originQuery, destQuery } = this.state;\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<nav>\n\t\t\t\t\t<div className='logo' />\n\t\t\t\t</nav>\n\t\t\t\t<section>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<p className=\"title\">\n\t\t\t\t\t\t\t\tExperience complete freight rate visibility.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p className='subtitle'>\n\t\t\t\t\t\t\t\tCompare freight rates instantly across any port pair with a detailed cost breakup.\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className='grid-container'>\n\t\t\t\t\t\t\t\t<div className='flex-item'>\n\t\t\t\t\t\t\t\t\t<p className='selectbox-title'>ORIGIN PORT</p>\n\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\tclassName=\"input search\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Type here...\"\n\t\t\t\t\t\t\t\t\t\tvalue={originQuery}\n\t\t\t\t\t\t\t\t\t\toptions={results}\n\t\t\t\t\t\t\t\t\t\tonSelect={this.onSelectOrigin}\n\t\t\t\t\t\t\t\t\t\tonChange={this.onChangeOrigin} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='flex-item'>\n\t\t\t\t\t\t\t\t\t<p className='selectbox-title'>DESTINATION PORT</p>\n\t\t\t\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\t\t\t\tclassName=\"input search\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Type here...\"\n\t\t\t\t\t\t\t\t\t\tvalue={destQuery}\n\t\t\t\t\t\t\t\t\t\toptions={results}\n\t\t\t\t\t\t\t\t\t\tonSelect={this.onSelectDest}\n\t\t\t\t\t\t\t\t\t\tonChange={this.onChangeDest} />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(Home);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Home from \"../components/Home\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn <Home />;\n\t}\n}\n\nexport default connect(\n\tnull,\n\tnull\n)(App);\n","import ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport { store, history } from \"./store\";\n\nimport { Route, Switch } from \"react-router-dom\";\nimport { ConnectedRouter } from \"react-router-redux\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<ConnectedRouter history={history}>\n\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" component={App} />\n\t\t\t</Switch>\n\t\t</ConnectedRouter>\n\t</Provider>,\n\n\tdocument.getElementById(\"root\")\n);\n"],"sourceRoot":""}